(() => {
  // src/dom.js
  function appendNode(node, dom) {
    const { container } = dom;
    let sibling;
    while (dom && !sibling) {
      ({ node: sibling, sibling: dom } = dom);
    }
    if (sibling && sibling.previousSibling !== node) {
      container.insertBefore(node, sibling);
    } else if (!sibling && container.lastChild !== node) {
      container.appendChild(node);
    }
  }
  function deactivateFiber(fiber) {
    const { m: memos, t: teardowns } = fiber;
    for (const childFiber of fiber.slice(1)) {
      deactivateFiber(childFiber);
    }
    for (const index of teardowns) {
      const [teardown, ...prevDeps] = memos[index];
      if (typeof teardown === "function")
        teardown(prevDeps);
    }
  }
  function removeNode(view, container) {
    let [node, ...childViews] = view;
    if (node) {
      container.removeChild(node);
      return;
    }
    for (const childView of childViews) {
      removeNode(childView, container);
      const { impulse } = childView;
      if (impulse)
        deactivateFiber(impulse);
    }
  }
  function populateChildren(outlines, state, parentFiber, view, dom, hydrateNodes) {
    const [, ...childViews] = view;
    for (let i = outlines.length - 1; i >= 0; i--) {
      reconcileNode(outlines[i], state, parentFiber, view, i, dom, hydrateNodes);
    }
    const { container } = dom;
    view.splice(outlines.length + 1);
    for (const childView of childViews) {
      if (!childView?.length || view.indexOf(childView) > 0)
        continue;
      removeNode(childView, container);
    }
    const entries = Object.entries(view.keyedViews);
    const validEntries = entries.filter(([, childView]) => view.indexOf(childView) > 0);
    if (validEntries.length !== entries.length)
      view.keyedViews = Object.fromEntries(validEntries);
  }

  // src/impulse.js
  var fibers = [];
  function unsubscribeFibers(fibers2) {
    for (const fiber of fibers2) {
      const { 0: impulse, s: subscriptionsSet } = fiber;
      for (const subscriptions of subscriptionsSet) {
        subscriptions.delete(impulse);
      }
      subscriptionsSet.clear();
      unsubscribeFibers(fiber.slice(1));
    }
  }
  function executeCallback(callback, ...params) {
    try {
      return callback(...params);
    } catch (e) {
      console.error(e);
    }
  }
  function processImpulse(callback, state, parentFiber, parentView, i, dom = {}, hydrateNodes) {
    const [framework] = frameworks;
    if (framework.isServer)
      return executeCallback(callback, state);
    const sibling = { ...dom };
    let view = parentView[i + 1];
    const fiber = view?.fiber || Object.assign([], { d: fibers.length, m: [], s: /* @__PURE__ */ new Set() });
    let initialized = false;
    function impulse(newState) {
      frameworks.unshift(framework);
      fibers.unshift(fiber);
      unsubscribeFibers(fiber.splice(1));
      Object.assign(fiber, { i: 0, t: [] });
      if (newState)
        state = newState;
      const outline = executeCallback(callback, state);
      if (initialized)
        dom = { ...sibling };
      reconcileNode(outline, state, parentFiber, parentView, i, dom, hydrateNodes);
      const newView = parentView[i + 1];
      if (view !== newView) {
        if (view)
          removeNode(view, dom.container);
        view = newView;
        view.fiber = fiber;
      }
      fibers.shift();
      frameworks.shift();
      impulse.q = false;
    }
    fiber[0] = impulse;
    parentFiber.push(fiber);
    impulse();
    dom.sibling = sibling;
    hydrateNodes = void 0;
    initialized = true;
  }

  // src/view.js
  var managedProps = /* @__PURE__ */ new WeakMap();
  function processText(text, view = [], dom) {
    const nodeValue = String(text);
    let [node] = view;
    if (!node || !("nodeValue" in node)) {
      const [[document]] = frameworks;
      node = document.createTextNode(nodeValue);
      appendNode(node, dom);
      return [node];
    }
    if (nodeValue !== node.nodeValue)
      node.nodeValue = nodeValue;
    return view;
  }
  function processElement(tagName, obj, view, hydrateNodes) {
    const [framework] = frameworks;
    const [document, updater, defaultProps] = framework;
    let [node] = view;
    if (!hydrateNodes && !("keyedViews" in view) || tagName !== node?.tagName?.toLowerCase?.()) {
      if (!Object.prototype.hasOwnProperty.call(defaultProps, tagName)) {
        const example = document.createElement(tagName);
        defaultProps[tagName] = example;
      }
      node = document.createElement(tagName);
      view = Object.assign([node], { keyedViews: {} });
    } else if (hydrateNodes) {
      hydrateNodes.pop();
      view.keyedViews = {};
    }
    if (obj) {
      const prevNames = managedProps.get(node);
      updater(node, obj, prevNames, defaultProps[node.tagName.toLowerCase()]);
      managedProps.set(node, Object.keys(obj));
    }
    return view;
  }
  function processNode(info, state, parentFiber, parentView, i, dom, hydrateNodes) {
    if (!info && info !== 0) {
      return [];
    } else if (typeof info === "object" && !Array.isArray(info)) {
      appendNode(info, dom);
      return [info];
    }
    const { doAppend } = dom;
    let view = hydrateNodes ? hydrateNodes.slice(-1) : parentView[i + 1];
    if (info === true) {
      if (!view)
        return [];
      const [node2] = view;
      if (doAppend && node2)
        appendNode(node2, dom);
      return view;
    } else if (!Array.isArray(info)) {
      const textView = processText(info, view, dom);
      if (hydrateNodes && textView === view)
        hydrateNodes.pop();
      return textView;
    }
    let [str, obj, ...arr] = info;
    const indexedView = view;
    const hasKey = ~str.indexOf(":");
    let [, tagName, key] = hasKey ? str.match(/^\s*(.*?)\s*(?::(.*?))?$/) : [, str];
    if (!hydrateNodes)
      view = hasKey && parentView.keyedViews[key] || indexedView || [];
    let [node] = view;
    if (tagName === "") {
      if (node || !("keyedViews" in view))
        view = Object.assign([], { keyedViews: {} });
      if (obj)
        state = obj;
      if (!doAppend)
        dom.doAppend = view !== indexedView;
    } else {
      [node] = view = processElement(tagName.toLowerCase(), obj, view, hydrateNodes);
      if (doAppend || view !== indexedView)
        appendNode(node, dom);
      dom = { container: node };
      if (hydrateNodes) {
        hydrateNodes = [...node.childNodes];
      }
    }
    if (hasKey)
      parentView.keyedViews[key] = view;
    populateChildren(arr, state, parentFiber, view, dom, hydrateNodes);
    dom.doAppend = doAppend;
    return view;
  }
  function reconcileNode(info, state, parentFiber, parentView, i, dom, hydrateNodes) {
    if (typeof info === "function") {
      if (!frameworks[0]?.isServer) {
        processImpulse(info, state, parentFiber, parentView, i, dom, hydrateNodes);
        return;
      }
      info = info(state);
    }
    const sibling = { ...dom };
    const view = processNode(info, state, parentFiber, parentView, i, dom, hydrateNodes);
    let [node] = parentView[i + 1] = view;
    if (!node && dom.node !== sibling.node)
      node = dom.node;
    if (node)
      Object.assign(dom, { node, sibling: void 0 });
    const { fiber } = view;
    if (fiber && fiber !== fibers[0])
      deactivateFiber(fiber);
  }

  // src/index.js
  var selfClosingTags = /* @__PURE__ */ new Set([
    "wbr",
    "track",
    "source",
    "param",
    "meta",
    "link",
    "keygen",
    "input",
    "img",
    "hr",
    "embed",
    "command",
    "col",
    "br",
    "base",
    "area",
    "!doctype"
  ]);
  var nameMap = {
    className: "class",
    tabIndex: "tabindex"
  };
  var virtualDocument = {
    createTextNode(nodeValue) {
      return {
        nodeValue,
        toString() {
          return this.nodeValue;
        }
      };
    },
    createDocumentFragment() {
      return {
        childNodes: [],
        appendChild(child) {
          this.removeChild(child);
          this.childNodes.push(child);
          child.parentElement = this;
        },
        insertBefore(child, sibling) {
          const { childNodes } = this;
          this.removeChild(child);
          const index = childNodes.indexOf(sibling);
          childNodes.splice(index, 0, child);
          child.parentElement = this;
        },
        removeChild(child) {
          const { childNodes } = this;
          const index = childNodes.indexOf(child);
          if (index === -1)
            return;
          childNodes.splice(index, 1);
          child.parentElement = null;
        },
        toString() {
          return this.childNodes.join("");
        }
      };
    },
    createElement(tagName) {
      const fragment = this.createDocumentFragment();
      return Object.assign(fragment, {
        tagName,
        style: {},
        toString() {
          const {
            appendChild,
            insertBefore,
            removeChild,
            toString,
            tagName: tagName2,
            style,
            childNodes,
            parentElement,
            ...attributes
          } = this;
          let html = `<${tagName2 === "!doctype" ? "!DOCTYPE" : tagName2}`;
          for (let [name, value] of Object.entries(attributes)) {
            if (!value && value !== 0 || typeof value === "function")
              continue;
            name = nameMap[name] || name.replace(/(?=[A-Z])/g, "-").toLowerCase();
            html += ` ${name}="${value === true ? "" : value}"`;
          }
          const styleString = Object.entries(style).map(([name, value]) => {
            return `${name}:${value}`;
          }).join(";");
          if (styleString)
            html += ` style="${styleString}"`;
          if (selfClosingTags.has(tagName2.toLowerCase()))
            return `${html}>`;
          return `${html}>${this.childNodes.join("")}</${tagName2}>`;
        }
      });
    }
  };
  function defaultUpdater(element, props, prevNames, defaultProps, ignoreRef) {
    prevNames = new Set(prevNames);
    const changes = Object.entries(props).filter(([name, value]) => {
      prevNames.delete(name);
      const currentValue = ~name.indexOf("-") ? element.getAttribute(name) : element[name];
      return value !== currentValue;
    });
    for (const name of prevNames) {
      const defaultValue = ~name.indexOf("-") ? defaultElement.getAttribute(name) : defaultProps[name];
      changes.push([name, defaultValue]);
    }
    for (const [name, value] of changes) {
      if (name === "ref") {
        if (ignoreRef)
          continue;
        if (typeof value === "function")
          value(element);
        else if (Array.isArray(value))
          value.unshift(element);
      } else if (name === "style") {
        const entries = Object.entries(value);
        const { style } = element;
        for (const [name2, value2] of entries) {
          if (style[name2] === String(value2))
            continue;
          style[name2] = value2;
        }
      } else if (!~name.indexOf("-")) {
        element[name] = value;
      } else if (value === void 0 || value === null) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? "" : value);
      }
    }
  }
  var frameworks = [];
  var isClient = typeof window === "object";
  var defaultDocument = isClient && window.document || virtualDocument;
  var defaultFramework = [defaultDocument, defaultUpdater, {}];
  var virtualFramework = [virtualDocument, defaultUpdater, {}];
  Object.assign(defaultFramework, { isServer: !isClient });
  function stew(container, layout, framework = defaultFramework) {
    let isFragment;
    if (typeof container === "string") {
      const [document] = framework;
      isFragment = container === "";
      if (isFragment)
        container = document.createDocumentFragment();
      else if (!("querySelector" in document))
        return;
      else
        container = document.querySelector(container);
    }
    const fiber = [,];
    const view = Object.assign([container], { keyedViews: {} });
    const dom = { container };
    const hydrateNodes = framework.isServer ? void 0 : [...container.childNodes];
    frameworks.unshift(framework);
    reconcileNode(layout, {}, fiber, view, 0, dom, hydrateNodes);
    frameworks.shift();
    if (hydrateNodes) {
      for (const node of hydrateNodes) {
        container.removeChild(node);
      }
    }
    if (isFragment)
      return container;
  }

  // src/state.js
  var effects = [];
  var queue = /* @__PURE__ */ new Set();
  var resets = [];
  var timeout;
  function scheduleCallbacks(subscriptions) {
    if (typeof subscriptions === "function") {
      effects.push(subscriptions);
    } else {
      for (const fiber of subscriptions) {
        queue.add(fiber);
      }
    }
    timeout = timeout !== void 0 ? timeout : setTimeout(() => {
      const resetsCopy = resets.splice(0);
      const queueLayers = {};
      for (const fiber of [...queue]) {
        const { 0: impulse, d } = fiber;
        const queueLayer = queueLayers[d];
        if (queueLayer)
          queueLayer.push(impulse);
        else
          queueLayers[d] = [impulse];
        fiber[0].q = true;
      }
      queue.clear();
      timeout = void 0;
      for (const effect of effects.splice(0)) {
        effect();
      }
      for (const i of Object.keys(queueLayers).sort((a, b) => a - b)) {
        for (const impulse of queueLayers[i]) {
          if (impulse.q)
            impulse();
        }
      }
      for (const [state, name] of resetsCopy) {
        state[name] = void 0;
      }
    }, 0);
  }
  function createState(object, key) {
    const state = Array.isArray(object) ? [] : {};
    const cues = key !== void 0 && object[key] || [];
    const cuesObject = Object.fromEntries(cues.map((cue) => [cue]));
    const entries = Object.entries({ ...cuesObject, ...object });
    if (frameworks[0]?.isServer) {
      Object.assign(state, Object.fromEntries(entries.splice(0)));
    }
    for (let [name, value] of entries) {
      if (name === key)
        continue;
      const isCue = ~cues.indexOf(name);
      const subscriptions = /* @__PURE__ */ new Set();
      if (typeof value === "function") {
        value = value.bind(state);
      }
      Object.defineProperty(state, name, {
        get() {
          if (fibers.length) {
            const [fiber] = fibers;
            subscriptions.add(fiber);
            fiber.s.add(subscriptions);
          }
          return value;
        },
        set(newValue) {
          if (newValue === value)
            return;
          value = newValue;
          if (isCue) {
            if (value === void 0)
              return;
            resets.push([state, name]);
          }
          scheduleCallbacks(subscriptions);
          subscriptions.clear();
        }
      });
    }
    if (key === void 0)
      return state;
    return Object.defineProperty(state, key, { value: state, writeable: false });
  }

  // src/hooks.js
  function useMemo(callback, deps, ...rest) {
    if (frameworks[0]?.isServer)
      return executeCallback(callback, void 0, void 0);
    const cueCount = rest.length && typeof rest[0] !== "function" ? rest.shift() : 0;
    const [callbackOnPersist] = rest;
    const [fiber] = fibers;
    const { m: memos, i: index } = fiber || [];
    let memo = memos?.[index];
    let prevDeps, persist;
    if (memo) {
      prevDeps = memo.splice(1);
      persist = deps && deps.length === prevDeps?.length && deps.every((it, i) => {
        return it === prevDeps[i] || i < cueCount && it === void 0;
      });
    } else {
      memo = [];
    }
    if (!persist)
      memo[0] = executeCallback(callback, memo[0], prevDeps);
    if (deps)
      memo.push(...deps);
    if (fiber)
      memos[fiber.i++] = memo;
    return persist && callbackOnPersist ? callbackOnPersist(memo[0]) : memo[0];
  }
  function useEffect(...params) {
    if (frameworks[0].isServer)
      return;
    const [fiber] = fibers;
    const { m: memos, i: index, t: teardowns } = fiber;
    effects.push(() => {
      fibers.unshift(fiber);
      useMemo(...params);
      fibers.shift();
      teardowns.push(index);
    });
    scheduleCallbacks([]);
    return memos[index];
  }
  function useState(...params) {
    const key = /^string|number$/.test(typeof params[0]) ? params.shift() : void 0;
    let object = params.shift();
    return useMemo((...params2) => {
      if (typeof object === "function")
        object = executeCallback(object, ...params2);
      return createState(object, key);
    }, ...params);
  }

  // src/main.js
  Object.assign(stew, {
    virtualFramework,
    useMemo,
    useEffect,
    useState
  });
  if (typeof window === "object") {
    window.stew = stew;
  } else if (typeof module === "object") {
    module.exports = stew;
  }
  var main_default = stew;
})();
/**
 * @license MIT
 * Copyright (c) 2023 Jeff Triplett
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
