(() => {
  // src/observe.js
  var queue = /* @__PURE__ */ new Set();
  var timeout;
  function screen(impulse) {
    const { parentImpulse } = impulse;
    if (!parentImpulse)
      return false;
    if (queue.has(parentImpulse))
      return true;
    return screen(parentImpulse);
  }
  function schedule(subscriptions) {
    if (frameworks[0]?.[0] === virtualDocument)
      return;
    for (const impulse of subscriptions) {
      queue.add(impulse);
    }
    subscriptions.clear();
    timeout = timeout !== void 0 ? timeout : setTimeout(() => {
      for (const impulse of queue) {
        const isCovered = screen(impulse);
        if (isCovered)
          continue;
        impulse();
      }
      queue.clear();
      timeout = void 0;
    }, 0);
  }
  function observe(object) {
    const state = {};
    for (let [name, value] of Object.entries(object)) {
      const subscriptions = /* @__PURE__ */ new Set();
      if (typeof value === "function") {
        value = value.bind(state);
      }
      Object.defineProperty(state, name, {
        get() {
          if (impulses.length) {
            const [impulse] = impulses;
            subscriptions.add(impulse);
            impulse.subscriptionsSet.add(subscriptions);
          }
          return value;
        },
        set(newValue) {
          if (newValue === value)
            return;
          value = newValue;
          schedule(subscriptions);
        }
      });
    }
    return state;
  }

  // src/activate.js
  var teardowns = /* @__PURE__ */ new WeakMap();
  var frameworks = [];
  var impulses = [];
  function unsubscribe(impulses2) {
    const persistentImpulses = [];
    for (const impulse of impulses2) {
      const { subscriptionsSet, childImpulses, persist } = impulse;
      if (persist) {
        persistentImpulses.push(impulse);
        continue;
      }
      for (const subscriptions of subscriptionsSet) {
        subscriptions.delete(impulse);
      }
      subscriptionsSet.clear();
      unsubscribe(childImpulses);
    }
    return persistentImpulses;
  }
  function activate(callback, state, parentView, i, dom, hydrateNodes) {
    const isEffect = state && i === void 0 && parentView[0] === void 0;
    const [framework] = frameworks;
    const [parentImpulse] = impulses;
    const [parentMemo] = memoStack;
    const childImpulses = [];
    let initialized = false;
    function impulse() {
      frameworks.unshift(framework);
      impulses.unshift(impulse);
      memoStack.unshift();
      const oldChildImpulses = childImpulses.splice(0);
      let outline;
      try {
        const param = isEffect ? [teardowns.get(parentView), ...parentView.slice(1)] : state;
        outline = callback(param);
      } catch (e) {
        console.error(e);
      }
      if (i !== void 0) {
        const domCopy = { ...dom };
        const oldView = parentView[i + 2];
        reconcile(outline, state, parentView, i, dom, hydrateNodes);
        const newView = parentView[i + 2];
        dom = domCopy;
        if (initialized && oldView?.length && newView !== oldView) {
          const { container } = dom;
          remove(oldView, container);
        }
      } else if (isEffect) {
        teardowns.set(parentView, outline);
      } else if (state) {
        const [node] = parentView;
        const [, updater] = framework;
        updater(node, outline);
      }
      const persistentImpulses = unsubscribe(oldChildImpulses);
      childImpulses.push(...persistentImpulses);
      memoStack.shift();
      impulses.shift();
      frameworks.shift();
    }
    if (isEffect) {
      schedule(/* @__PURE__ */ new Set([impulse]));
      return;
    }
    parentMemo?.push?.(impulse);
    parentImpulse?.childImpulses?.push?.(impulse);
    impulse.parentImpulse = parentImpulse;
    impulse.childImpulses = childImpulses;
    impulse.subscriptionsSet = /* @__PURE__ */ new Set();
    impulse(hydrateNodes);
    hydrateNodes = void 0;
    initialized = true;
  }

  // src/reconcile.js
  var memoStack = [];
  var memoMap = /* @__PURE__ */ new WeakMap();
  var states = /* @__PURE__ */ new WeakMap();
  function append(node, dom) {
    const { container } = dom;
    let sibling;
    while (dom && !sibling) {
      ({ node: sibling, sibling: dom } = dom);
    }
    if (sibling)
      container.insertBefore(node, sibling);
    else
      container.appendChild(node);
  }
  function remove(view, container) {
    if (teardowns.has(view)) {
      const teardown = teardowns.get(view);
      if (typeof teardown === "function")
        teardown();
      teardowns.delete(view);
    }
    let [node, , ...childViews] = view;
    if (node && container) {
      container.removeChild(node);
      container = void 0;
    }
    for (const childView of childViews) {
      remove(childView, container);
    }
  }
  function populate(outlines, state, view, dom, hydrateNodes) {
    const [, views, ...childViews] = view;
    for (let i = outlines.length - 1; i >= 0; i--) {
      reconcile(outlines[i], state, view, i, dom, hydrateNodes);
    }
    const { container } = dom;
    view.splice(outlines.length + 2);
    for (const childView of childViews) {
      if (!childView?.length || view.indexOf(childView) > 1)
        continue;
      remove(childView, container);
    }
    for (const [name, childView] of Object.entries(views)) {
      if (view.indexOf(childView) < 2)
        delete views[name];
    }
  }
  function write(text, view = [], dom, hydrateNodes) {
    const nodeValue = String(text);
    let [node] = view;
    if (!node || !("nodeValue" in node)) {
      node = frameworks[0][0].createTextNode(nodeValue);
      append(node, dom);
      return [node];
    }
    if (hydrateNodes)
      hydrateNodes.pop();
    if (nodeValue !== node.nodeValue)
      node.nodeValue = nodeValue;
    return view;
  }
  function update(outline, state, parentView, i, dom, hydrateNodes) {
    if (!outline && outline !== 0) {
      return [];
    } else if (typeof outline === "object" && !Array.isArray(outline)) {
      if (outline.parentElement)
        return [];
      append(outline, dom);
      return [outline];
    }
    const [, views] = parentView;
    let view = hydrateNodes ? hydrateNodes.slice(-1) : parentView[i + 2];
    if (outline === true) {
      return view || [];
    } else if (!Array.isArray(outline)) {
      return write(outline, view, dom, hydrateNodes);
    }
    const [str, obj, ...arr] = outline;
    const [, tagName, key] = str.match(/^\s*(.*?)\s*(?::(.*?))?$/);
    if (!hydrateNodes)
      views?.[key] || view;
    if (!view || view.length < 2)
      view = [, {}];
    let [node] = view;
    let persist;
    if (tagName === "") {
      if (node)
        view = [, {}];
      if (typeof obj === "function") {
        activate(obj, state, view);
      } else if (Array.isArray(obj)) {
        const [prevArr, ...prevImpulses] = memoMap.get(view) || [];
        const memo = [obj];
        memoMap.set(view, memo);
        memoStack.unshift(memo);
        persist = obj.length === prevArr?.length && obj.every((it, i2) => it === prevArr[i2]);
        for (const impulse of prevImpulses) {
          impulse.persist = persist;
        }
      } else if (obj && typeof obj === "object") {
        state = states.get(view) || observe(obj);
        states.set(view, state);
      }
    } else {
      if (node?.tagName?.toLowerCase?.() !== tagName.toLowerCase()) {
        node = frameworks[0][0].createElement(tagName);
        view = [node, {}];
        append(node, dom);
      } else if (hydrateNodes) {
        hydrateNodes.pop();
      }
      if (typeof obj === "function")
        activate(obj, state, view);
      else if (obj)
        frameworks[0][1](node, obj);
      dom = { container: node };
      if (hydrateNodes) {
        hydrateNodes = [...node.childNodes];
      }
    }
    if (key)
      views[key] = view;
    if (!persist)
      populate(arr, state, view, dom, hydrateNodes);
    if (persist !== void 0)
      memoStack.shift();
    return view;
  }
  function reconcile(outline, state, parentView, i, dom, hydrateNodes) {
    if (typeof outline === "function") {
      activate(outline, state, parentView, i, dom, hydrateNodes);
      return;
    }
    const sibling = { ...dom };
    const view = update(outline, state, parentView, i, dom, hydrateNodes);
    let [node] = parentView[i + 2] = view;
    if (!node && dom.node !== sibling.node)
      node = dom.node;
    if (node)
      Object.assign(dom, { node, sibling });
  }

  // src/index.js
  var selfClosingTags = /* @__PURE__ */ new Set([
    "wbr",
    "track",
    "source",
    "param",
    "meta",
    "link",
    "keygen",
    "input",
    "img",
    "hr",
    "embed",
    "command",
    "col",
    "br",
    "base",
    "area",
    "!doctype"
  ]);
  var nameMap = {
    className: "class"
  };
  var virtualDocument = {
    createTextNode(nodeValue) {
      return {
        nodeValue,
        toString() {
          return this.nodeValue;
        }
      };
    },
    createDocumentFragment() {
      return {
        childNodes: [],
        appendChild(child) {
          this.removeChild(child);
          this.childNodes.push(child);
          child.parentElement = this;
        },
        insertBefore(child, sibling) {
          const { childNodes } = this;
          this.removeChild(child);
          const index = childNodes.indexOf(sibling);
          childNodes.splice(index, 0, child);
          child.parentElement = this;
        },
        removeChild(child) {
          const { childNodes } = this;
          const index = childNodes.indexOf(child);
          if (index === -1)
            return;
          childNodes.splice(index, 1);
          child.parentElement = null;
        },
        toString() {
          return this.childNodes.join("");
        }
      };
    },
    createElement(tagName) {
      const fragment = this.createDocumentFragment();
      return Object.assign(fragment, {
        tagName,
        toString() {
          const {
            appendChild,
            insertBefore,
            removeChild,
            toString,
            tagName: tagName2,
            childNodes,
            parentElement,
            ...attributes
          } = this;
          let html = `<${tagName2}`;
          for (let [name, value] of Object.entries(attributes)) {
            if (!value && value !== 0 || typeof value === "function")
              continue;
            name = nameMap[name] || name.replace(/(?=[A-Z])/g, "-").toLowerCase();
            html += ` ${name}="${value === true ? "" : value}"`;
          }
          if (selfClosingTags.has(tagName2.toLowerCase()))
            return `${html}>`;
          return `${html}>${this.childNodes.join("")}</${tagName2}>`;
        }
      });
    }
  };
  var defaultDocument = typeof window === "object" && window.document || virtualDocument;
  function defaultUpdater(node, attributes) {
    for (const [name, value] of Object.entries(attributes)) {
      if (node[name] === value)
        continue;
      node[name] = value;
    }
  }
  function create(selector, document) {
    const [tagName, ...strings] = ` ${selector}`.split(/(?=#|\.|\[)/);
    const node = document.createElement(tagName.slice(1) || "div");
    const classList = [];
    for (const string of strings) {
      if (string.startsWith("#")) {
        node.id = string.slice(1);
        continue;
      } else if (string.startsWith(".")) {
        classList.push(string.slice(1));
        continue;
      }
      const [, name, value] = string.match(/^\[\s*([^=[]*?)\s*(?:=([^[]*))?\]/);
      if (!name)
        continue;
      node[name] = value || true;
    }
    node.className = classList.join(" ");
    return node;
  }
  function stew(container, ...params) {
    if (!params.length) {
      if (typeof container === "function")
        return activate(container);
      if (typeof container === "object")
        return observe(container);
      return;
    }
    const [outline, document = defaultDocument, updater = defaultUpdater] = params;
    if (typeof container !== "object") {
      container = document?.querySelector?.(container) || create(container, document);
    }
    const view = [container, {}];
    const dom = { container };
    const hydrateNodes = [...container.childNodes];
    const framework = [document, updater];
    frameworks.unshift(framework);
    reconcile(outline, {}, view, 0, dom, hydrateNodes);
    frameworks.shift();
    for (const node of hydrateNodes) {
      container.removeChild(node);
    }
    return container;
  }
  Object.assign(stew, { document: virtualDocument });
  if (typeof window === "object") {
    window.stew = stew;
  } else if (typeof module === "object") {
    module.exports = stew;
  }
})();
